package controllers

import (
	"context"
	"encoding/json"
	"log"
	"net/http"
	"time"

	"github.com/mihir010/ylytic/database"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

func searchParams(filter bson.M) []primitive.M {
	ctx, cancel := context.WithTimeout(context.Background(), time.Microsecond*1000000)
	defer cancel()

	cur, err := database.Collection().Find(ctx, filter)

	if err != nil {
		log.Panic(err)
	}

	var docs []primitive.M

	for cur.Next(ctx) {
		var doc primitive.M

		err := cur.Decode(&doc)

		if err != nil {
			log.Panic(err)
		}

		docs = append(docs, doc)
	}

	defer cur.Close(ctx)

	return docs
}

func SearchParams(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	w.Header().Set("Allow-Control-Allow-Methods", "GET")
	author := r.URL.Query().Get("author")
	text := r.URL.Query().Get("text")

	if author == "" {
		json.NewEncoder(w).Encode("user query cannot be empty string")
		return
	}
	filter := bson.M{}

	filter["author"] = bson.M{"$regex": author}
	filter["text"] = bson.M{"$regex": text}

	findAuthor := searchParams(filter)

	json.NewEncoder(w).Encode(findAuthor)
	return
}

func ServeHome(w http.ResponseWriter, r *http.Request) {
	json.NewEncoder(w).Encode("hello world!")
}
